/*
 * Weather API
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.      We provide following data through our API:      - Real-time weather  - 14 day weather forecast  - Astronomy  - Time zone  - Location data  - Search or Autocomplete API  - NEW: Historical weather  - NEW: Future Weather (Upto 300 days ahead)  - Weather Alerts  - Air Quality Data    # Getting Started     You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!      We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).      # Authentication     API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .        ##  key parameter   key=YOUR_API_KEY 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ForecastCondition;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * ForecastHour
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-22T21:39:34.951Z[GMT]")
public class ForecastHour {
  @SerializedName("time_epoch")
  private Integer timeEpoch = null;

  @SerializedName("time")
  private String time = null;

  @SerializedName("temp_c")
  private BigDecimal tempC = null;

  @SerializedName("temp_f")
  private BigDecimal tempF = null;

  @SerializedName("is_day")
  private Integer isDay = null;

  @SerializedName("condition")
  private ForecastCondition condition = null;

  @SerializedName("wind_mph")
  private BigDecimal windMph = null;

  @SerializedName("wind_kph")
  private BigDecimal windKph = null;

  @SerializedName("wind_degree")
  private Integer windDegree = null;

  @SerializedName("wind_dir")
  private String windDir = null;

  @SerializedName("pressure_mb")
  private Integer pressureMb = null;

  @SerializedName("pressure_in")
  private BigDecimal pressureIn = null;

  @SerializedName("precip_mm")
  private Integer precipMm = null;

  @SerializedName("precip_in")
  private Integer precipIn = null;

  @SerializedName("humidity")
  private Integer humidity = null;

  @SerializedName("cloud")
  private Integer cloud = null;

  @SerializedName("feelslike_c")
  private BigDecimal feelslikeC = null;

  @SerializedName("feelslike_f")
  private BigDecimal feelslikeF = null;

  @SerializedName("windchill_c")
  private BigDecimal windchillC = null;

  @SerializedName("windchill_f")
  private BigDecimal windchillF = null;

  @SerializedName("heatindex_c")
  private BigDecimal heatindexC = null;

  @SerializedName("heatindex_f")
  private BigDecimal heatindexF = null;

  @SerializedName("dewpoint_c")
  private BigDecimal dewpointC = null;

  @SerializedName("dewpoint_f")
  private BigDecimal dewpointF = null;

  @SerializedName("will_it_rain")
  private Integer willItRain = null;

  @SerializedName("chance_of_rain")
  private Integer chanceOfRain = null;

  @SerializedName("will_it_snow")
  private Integer willItSnow = null;

  @SerializedName("chance_of_snow")
  private Integer chanceOfSnow = null;

  @SerializedName("vis_km")
  private Integer visKm = null;

  @SerializedName("vis_miles")
  private Integer visMiles = null;

  @SerializedName("gust_mph")
  private Integer gustMph = null;

  @SerializedName("gust_kph")
  private BigDecimal gustKph = null;

  @SerializedName("uv")
  private Integer uv = null;

  public ForecastHour timeEpoch(Integer timeEpoch) {
    this.timeEpoch = timeEpoch;
    return this;
  }

   /**
   * Get timeEpoch
   * @return timeEpoch
  **/
  @Schema(example = "1658462400", description = "")
  public Integer getTimeEpoch() {
    return timeEpoch;
  }

  public void setTimeEpoch(Integer timeEpoch) {
    this.timeEpoch = timeEpoch;
  }

  public ForecastHour time(String time) {
    this.time = time;
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @Schema(example = "2022-07-22 00:00", description = "")
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public ForecastHour tempC(BigDecimal tempC) {
    this.tempC = tempC;
    return this;
  }

   /**
   * Get tempC
   * @return tempC
  **/
  @Schema(example = "28.7", description = "")
  public BigDecimal getTempC() {
    return tempC;
  }

  public void setTempC(BigDecimal tempC) {
    this.tempC = tempC;
  }

  public ForecastHour tempF(BigDecimal tempF) {
    this.tempF = tempF;
    return this;
  }

   /**
   * Get tempF
   * @return tempF
  **/
  @Schema(example = "83.7", description = "")
  public BigDecimal getTempF() {
    return tempF;
  }

  public void setTempF(BigDecimal tempF) {
    this.tempF = tempF;
  }

  public ForecastHour isDay(Integer isDay) {
    this.isDay = isDay;
    return this;
  }

   /**
   * Get isDay
   * @return isDay
  **/
  @Schema(example = "0", description = "")
  public Integer getIsDay() {
    return isDay;
  }

  public void setIsDay(Integer isDay) {
    this.isDay = isDay;
  }

  public ForecastHour condition(ForecastCondition condition) {
    this.condition = condition;
    return this;
  }

   /**
   * Get condition
   * @return condition
  **/
  @Schema(description = "")
  public ForecastCondition getCondition() {
    return condition;
  }

  public void setCondition(ForecastCondition condition) {
    this.condition = condition;
  }

  public ForecastHour windMph(BigDecimal windMph) {
    this.windMph = windMph;
    return this;
  }

   /**
   * Get windMph
   * @return windMph
  **/
  @Schema(example = "9.4", description = "")
  public BigDecimal getWindMph() {
    return windMph;
  }

  public void setWindMph(BigDecimal windMph) {
    this.windMph = windMph;
  }

  public ForecastHour windKph(BigDecimal windKph) {
    this.windKph = windKph;
    return this;
  }

   /**
   * Get windKph
   * @return windKph
  **/
  @Schema(example = "15.1", description = "")
  public BigDecimal getWindKph() {
    return windKph;
  }

  public void setWindKph(BigDecimal windKph) {
    this.windKph = windKph;
  }

  public ForecastHour windDegree(Integer windDegree) {
    this.windDegree = windDegree;
    return this;
  }

   /**
   * Get windDegree
   * @return windDegree
  **/
  @Schema(example = "265", description = "")
  public Integer getWindDegree() {
    return windDegree;
  }

  public void setWindDegree(Integer windDegree) {
    this.windDegree = windDegree;
  }

  public ForecastHour windDir(String windDir) {
    this.windDir = windDir;
    return this;
  }

   /**
   * Get windDir
   * @return windDir
  **/
  @Schema(example = "W", description = "")
  public String getWindDir() {
    return windDir;
  }

  public void setWindDir(String windDir) {
    this.windDir = windDir;
  }

  public ForecastHour pressureMb(Integer pressureMb) {
    this.pressureMb = pressureMb;
    return this;
  }

   /**
   * Get pressureMb
   * @return pressureMb
  **/
  @Schema(example = "1007", description = "")
  public Integer getPressureMb() {
    return pressureMb;
  }

  public void setPressureMb(Integer pressureMb) {
    this.pressureMb = pressureMb;
  }

  public ForecastHour pressureIn(BigDecimal pressureIn) {
    this.pressureIn = pressureIn;
    return this;
  }

   /**
   * Get pressureIn
   * @return pressureIn
  **/
  @Schema(example = "29.73", description = "")
  public BigDecimal getPressureIn() {
    return pressureIn;
  }

  public void setPressureIn(BigDecimal pressureIn) {
    this.pressureIn = pressureIn;
  }

  public ForecastHour precipMm(Integer precipMm) {
    this.precipMm = precipMm;
    return this;
  }

   /**
   * Get precipMm
   * @return precipMm
  **/
  @Schema(example = "0", description = "")
  public Integer getPrecipMm() {
    return precipMm;
  }

  public void setPrecipMm(Integer precipMm) {
    this.precipMm = precipMm;
  }

  public ForecastHour precipIn(Integer precipIn) {
    this.precipIn = precipIn;
    return this;
  }

   /**
   * Get precipIn
   * @return precipIn
  **/
  @Schema(example = "0", description = "")
  public Integer getPrecipIn() {
    return precipIn;
  }

  public void setPrecipIn(Integer precipIn) {
    this.precipIn = precipIn;
  }

  public ForecastHour humidity(Integer humidity) {
    this.humidity = humidity;
    return this;
  }

   /**
   * Get humidity
   * @return humidity
  **/
  @Schema(example = "58", description = "")
  public Integer getHumidity() {
    return humidity;
  }

  public void setHumidity(Integer humidity) {
    this.humidity = humidity;
  }

  public ForecastHour cloud(Integer cloud) {
    this.cloud = cloud;
    return this;
  }

   /**
   * Get cloud
   * @return cloud
  **/
  @Schema(example = "19", description = "")
  public Integer getCloud() {
    return cloud;
  }

  public void setCloud(Integer cloud) {
    this.cloud = cloud;
  }

  public ForecastHour feelslikeC(BigDecimal feelslikeC) {
    this.feelslikeC = feelslikeC;
    return this;
  }

   /**
   * Get feelslikeC
   * @return feelslikeC
  **/
  @Schema(example = "30.5", description = "")
  public BigDecimal getFeelslikeC() {
    return feelslikeC;
  }

  public void setFeelslikeC(BigDecimal feelslikeC) {
    this.feelslikeC = feelslikeC;
  }

  public ForecastHour feelslikeF(BigDecimal feelslikeF) {
    this.feelslikeF = feelslikeF;
    return this;
  }

   /**
   * Get feelslikeF
   * @return feelslikeF
  **/
  @Schema(example = "86.9", description = "")
  public BigDecimal getFeelslikeF() {
    return feelslikeF;
  }

  public void setFeelslikeF(BigDecimal feelslikeF) {
    this.feelslikeF = feelslikeF;
  }

  public ForecastHour windchillC(BigDecimal windchillC) {
    this.windchillC = windchillC;
    return this;
  }

   /**
   * Get windchillC
   * @return windchillC
  **/
  @Schema(example = "28.7", description = "")
  public BigDecimal getWindchillC() {
    return windchillC;
  }

  public void setWindchillC(BigDecimal windchillC) {
    this.windchillC = windchillC;
  }

  public ForecastHour windchillF(BigDecimal windchillF) {
    this.windchillF = windchillF;
    return this;
  }

   /**
   * Get windchillF
   * @return windchillF
  **/
  @Schema(example = "83.7", description = "")
  public BigDecimal getWindchillF() {
    return windchillF;
  }

  public void setWindchillF(BigDecimal windchillF) {
    this.windchillF = windchillF;
  }

  public ForecastHour heatindexC(BigDecimal heatindexC) {
    this.heatindexC = heatindexC;
    return this;
  }

   /**
   * Get heatindexC
   * @return heatindexC
  **/
  @Schema(example = "30.5", description = "")
  public BigDecimal getHeatindexC() {
    return heatindexC;
  }

  public void setHeatindexC(BigDecimal heatindexC) {
    this.heatindexC = heatindexC;
  }

  public ForecastHour heatindexF(BigDecimal heatindexF) {
    this.heatindexF = heatindexF;
    return this;
  }

   /**
   * Get heatindexF
   * @return heatindexF
  **/
  @Schema(example = "86.9", description = "")
  public BigDecimal getHeatindexF() {
    return heatindexF;
  }

  public void setHeatindexF(BigDecimal heatindexF) {
    this.heatindexF = heatindexF;
  }

  public ForecastHour dewpointC(BigDecimal dewpointC) {
    this.dewpointC = dewpointC;
    return this;
  }

   /**
   * Get dewpointC
   * @return dewpointC
  **/
  @Schema(example = "19.6", description = "")
  public BigDecimal getDewpointC() {
    return dewpointC;
  }

  public void setDewpointC(BigDecimal dewpointC) {
    this.dewpointC = dewpointC;
  }

  public ForecastHour dewpointF(BigDecimal dewpointF) {
    this.dewpointF = dewpointF;
    return this;
  }

   /**
   * Get dewpointF
   * @return dewpointF
  **/
  @Schema(example = "67.3", description = "")
  public BigDecimal getDewpointF() {
    return dewpointF;
  }

  public void setDewpointF(BigDecimal dewpointF) {
    this.dewpointF = dewpointF;
  }

  public ForecastHour willItRain(Integer willItRain) {
    this.willItRain = willItRain;
    return this;
  }

   /**
   * Get willItRain
   * @return willItRain
  **/
  @Schema(example = "0", description = "")
  public Integer getWillItRain() {
    return willItRain;
  }

  public void setWillItRain(Integer willItRain) {
    this.willItRain = willItRain;
  }

  public ForecastHour chanceOfRain(Integer chanceOfRain) {
    this.chanceOfRain = chanceOfRain;
    return this;
  }

   /**
   * Get chanceOfRain
   * @return chanceOfRain
  **/
  @Schema(example = "0", description = "")
  public Integer getChanceOfRain() {
    return chanceOfRain;
  }

  public void setChanceOfRain(Integer chanceOfRain) {
    this.chanceOfRain = chanceOfRain;
  }

  public ForecastHour willItSnow(Integer willItSnow) {
    this.willItSnow = willItSnow;
    return this;
  }

   /**
   * Get willItSnow
   * @return willItSnow
  **/
  @Schema(example = "0", description = "")
  public Integer getWillItSnow() {
    return willItSnow;
  }

  public void setWillItSnow(Integer willItSnow) {
    this.willItSnow = willItSnow;
  }

  public ForecastHour chanceOfSnow(Integer chanceOfSnow) {
    this.chanceOfSnow = chanceOfSnow;
    return this;
  }

   /**
   * Get chanceOfSnow
   * @return chanceOfSnow
  **/
  @Schema(example = "0", description = "")
  public Integer getChanceOfSnow() {
    return chanceOfSnow;
  }

  public void setChanceOfSnow(Integer chanceOfSnow) {
    this.chanceOfSnow = chanceOfSnow;
  }

  public ForecastHour visKm(Integer visKm) {
    this.visKm = visKm;
    return this;
  }

   /**
   * Get visKm
   * @return visKm
  **/
  @Schema(example = "10", description = "")
  public Integer getVisKm() {
    return visKm;
  }

  public void setVisKm(Integer visKm) {
    this.visKm = visKm;
  }

  public ForecastHour visMiles(Integer visMiles) {
    this.visMiles = visMiles;
    return this;
  }

   /**
   * Get visMiles
   * @return visMiles
  **/
  @Schema(example = "6", description = "")
  public Integer getVisMiles() {
    return visMiles;
  }

  public void setVisMiles(Integer visMiles) {
    this.visMiles = visMiles;
  }

  public ForecastHour gustMph(Integer gustMph) {
    this.gustMph = gustMph;
    return this;
  }

   /**
   * Get gustMph
   * @return gustMph
  **/
  @Schema(example = "15", description = "")
  public Integer getGustMph() {
    return gustMph;
  }

  public void setGustMph(Integer gustMph) {
    this.gustMph = gustMph;
  }

  public ForecastHour gustKph(BigDecimal gustKph) {
    this.gustKph = gustKph;
    return this;
  }

   /**
   * Get gustKph
   * @return gustKph
  **/
  @Schema(example = "24.1", description = "")
  public BigDecimal getGustKph() {
    return gustKph;
  }

  public void setGustKph(BigDecimal gustKph) {
    this.gustKph = gustKph;
  }

  public ForecastHour uv(Integer uv) {
    this.uv = uv;
    return this;
  }

   /**
   * Get uv
   * @return uv
  **/
  @Schema(example = "1", description = "")
  public Integer getUv() {
    return uv;
  }

  public void setUv(Integer uv) {
    this.uv = uv;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastHour forecastHour = (ForecastHour) o;
    return Objects.equals(this.timeEpoch, forecastHour.timeEpoch) &&
        Objects.equals(this.time, forecastHour.time) &&
        Objects.equals(this.tempC, forecastHour.tempC) &&
        Objects.equals(this.tempF, forecastHour.tempF) &&
        Objects.equals(this.isDay, forecastHour.isDay) &&
        Objects.equals(this.condition, forecastHour.condition) &&
        Objects.equals(this.windMph, forecastHour.windMph) &&
        Objects.equals(this.windKph, forecastHour.windKph) &&
        Objects.equals(this.windDegree, forecastHour.windDegree) &&
        Objects.equals(this.windDir, forecastHour.windDir) &&
        Objects.equals(this.pressureMb, forecastHour.pressureMb) &&
        Objects.equals(this.pressureIn, forecastHour.pressureIn) &&
        Objects.equals(this.precipMm, forecastHour.precipMm) &&
        Objects.equals(this.precipIn, forecastHour.precipIn) &&
        Objects.equals(this.humidity, forecastHour.humidity) &&
        Objects.equals(this.cloud, forecastHour.cloud) &&
        Objects.equals(this.feelslikeC, forecastHour.feelslikeC) &&
        Objects.equals(this.feelslikeF, forecastHour.feelslikeF) &&
        Objects.equals(this.windchillC, forecastHour.windchillC) &&
        Objects.equals(this.windchillF, forecastHour.windchillF) &&
        Objects.equals(this.heatindexC, forecastHour.heatindexC) &&
        Objects.equals(this.heatindexF, forecastHour.heatindexF) &&
        Objects.equals(this.dewpointC, forecastHour.dewpointC) &&
        Objects.equals(this.dewpointF, forecastHour.dewpointF) &&
        Objects.equals(this.willItRain, forecastHour.willItRain) &&
        Objects.equals(this.chanceOfRain, forecastHour.chanceOfRain) &&
        Objects.equals(this.willItSnow, forecastHour.willItSnow) &&
        Objects.equals(this.chanceOfSnow, forecastHour.chanceOfSnow) &&
        Objects.equals(this.visKm, forecastHour.visKm) &&
        Objects.equals(this.visMiles, forecastHour.visMiles) &&
        Objects.equals(this.gustMph, forecastHour.gustMph) &&
        Objects.equals(this.gustKph, forecastHour.gustKph) &&
        Objects.equals(this.uv, forecastHour.uv);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeEpoch, time, tempC, tempF, isDay, condition, windMph, windKph, windDegree, windDir, pressureMb, pressureIn, precipMm, precipIn, humidity, cloud, feelslikeC, feelslikeF, windchillC, windchillF, heatindexC, heatindexF, dewpointC, dewpointF, willItRain, chanceOfRain, willItSnow, chanceOfSnow, visKm, visMiles, gustMph, gustKph, uv);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastHour {\n");
    
    sb.append("    timeEpoch: ").append(toIndentedString(timeEpoch)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    tempC: ").append(toIndentedString(tempC)).append("\n");
    sb.append("    tempF: ").append(toIndentedString(tempF)).append("\n");
    sb.append("    isDay: ").append(toIndentedString(isDay)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    windMph: ").append(toIndentedString(windMph)).append("\n");
    sb.append("    windKph: ").append(toIndentedString(windKph)).append("\n");
    sb.append("    windDegree: ").append(toIndentedString(windDegree)).append("\n");
    sb.append("    windDir: ").append(toIndentedString(windDir)).append("\n");
    sb.append("    pressureMb: ").append(toIndentedString(pressureMb)).append("\n");
    sb.append("    pressureIn: ").append(toIndentedString(pressureIn)).append("\n");
    sb.append("    precipMm: ").append(toIndentedString(precipMm)).append("\n");
    sb.append("    precipIn: ").append(toIndentedString(precipIn)).append("\n");
    sb.append("    humidity: ").append(toIndentedString(humidity)).append("\n");
    sb.append("    cloud: ").append(toIndentedString(cloud)).append("\n");
    sb.append("    feelslikeC: ").append(toIndentedString(feelslikeC)).append("\n");
    sb.append("    feelslikeF: ").append(toIndentedString(feelslikeF)).append("\n");
    sb.append("    windchillC: ").append(toIndentedString(windchillC)).append("\n");
    sb.append("    windchillF: ").append(toIndentedString(windchillF)).append("\n");
    sb.append("    heatindexC: ").append(toIndentedString(heatindexC)).append("\n");
    sb.append("    heatindexF: ").append(toIndentedString(heatindexF)).append("\n");
    sb.append("    dewpointC: ").append(toIndentedString(dewpointC)).append("\n");
    sb.append("    dewpointF: ").append(toIndentedString(dewpointF)).append("\n");
    sb.append("    willItRain: ").append(toIndentedString(willItRain)).append("\n");
    sb.append("    chanceOfRain: ").append(toIndentedString(chanceOfRain)).append("\n");
    sb.append("    willItSnow: ").append(toIndentedString(willItSnow)).append("\n");
    sb.append("    chanceOfSnow: ").append(toIndentedString(chanceOfSnow)).append("\n");
    sb.append("    visKm: ").append(toIndentedString(visKm)).append("\n");
    sb.append("    visMiles: ").append(toIndentedString(visMiles)).append("\n");
    sb.append("    gustMph: ").append(toIndentedString(gustMph)).append("\n");
    sb.append("    gustKph: ").append(toIndentedString(gustKph)).append("\n");
    sb.append("    uv: ").append(toIndentedString(uv)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
