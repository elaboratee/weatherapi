/*
 * Weather API
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.      We provide following data through our API:      - Real-time weather  - 14 day weather forecast  - Astronomy  - Time zone  - Location data  - Search or Autocomplete API  - NEW: Historical weather  - NEW: Future Weather (Upto 300 days ahead)  - Weather Alerts  - Air Quality Data    # Getting Started     You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!      We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).      # Authentication     API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .        ##  key parameter   key=YOUR_API_KEY 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ForecastAstro;
import io.swagger.client.model.ForecastDay;
import io.swagger.client.model.ForecastHour;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
/**
 * ForecastForecastday
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-22T21:39:34.951Z[GMT]")
public class ForecastForecastday {
  @SerializedName("date")
  private LocalDate date = null;

  @SerializedName("date_epoch")
  private Integer dateEpoch = null;

  @SerializedName("day")
  private ForecastDay day = null;

  @SerializedName("astro")
  private ForecastAstro astro = null;

  @SerializedName("hour")
  private List<ForecastHour> hour = null;

  public ForecastForecastday date(LocalDate date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @Schema(description = "")
  public LocalDate getDate() {
    return date;
  }

  public void setDate(LocalDate date) {
    this.date = date;
  }

  public ForecastForecastday dateEpoch(Integer dateEpoch) {
    this.dateEpoch = dateEpoch;
    return this;
  }

   /**
   * Get dateEpoch
   * @return dateEpoch
  **/
  @Schema(example = "1658448000", description = "")
  public Integer getDateEpoch() {
    return dateEpoch;
  }

  public void setDateEpoch(Integer dateEpoch) {
    this.dateEpoch = dateEpoch;
  }

  public ForecastForecastday day(ForecastDay day) {
    this.day = day;
    return this;
  }

   /**
   * Get day
   * @return day
  **/
  @Schema(description = "")
  public ForecastDay getDay() {
    return day;
  }

  public void setDay(ForecastDay day) {
    this.day = day;
  }

  public ForecastForecastday astro(ForecastAstro astro) {
    this.astro = astro;
    return this;
  }

   /**
   * Get astro
   * @return astro
  **/
  @Schema(description = "")
  public ForecastAstro getAstro() {
    return astro;
  }

  public void setAstro(ForecastAstro astro) {
    this.astro = astro;
  }

  public ForecastForecastday hour(List<ForecastHour> hour) {
    this.hour = hour;
    return this;
  }

  public ForecastForecastday addHourItem(ForecastHour hourItem) {
    if (this.hour == null) {
      this.hour = new ArrayList<ForecastHour>();
    }
    this.hour.add(hourItem);
    return this;
  }

   /**
   * Get hour
   * @return hour
  **/
  @Schema(description = "")
  public List<ForecastHour> getHour() {
    return hour;
  }

  public void setHour(List<ForecastHour> hour) {
    this.hour = hour;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastForecastday forecastForecastday = (ForecastForecastday) o;
    return Objects.equals(this.date, forecastForecastday.date) &&
        Objects.equals(this.dateEpoch, forecastForecastday.dateEpoch) &&
        Objects.equals(this.day, forecastForecastday.day) &&
        Objects.equals(this.astro, forecastForecastday.astro) &&
        Objects.equals(this.hour, forecastForecastday.hour);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, dateEpoch, day, astro, hour);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastForecastday {\n");
    
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateEpoch: ").append(toIndentedString(dateEpoch)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    astro: ").append(toIndentedString(astro)).append("\n");
    sb.append("    hour: ").append(toIndentedString(hour)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
