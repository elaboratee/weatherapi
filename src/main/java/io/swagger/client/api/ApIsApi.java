/*
 * Weather API
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.      We provide following data through our API:      - Real-time weather  - 14 day weather forecast  - Astronomy  - Time zone  - Location data  - Search or Autocomplete API  - NEW: Historical weather  - NEW: Future Weather (Upto 300 days ahead)  - Weather Alerts  - Air Quality Data    # Getting Started     You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!      We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).      # Authentication     API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .        ##  key parameter   key=YOUR_API_KEY 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ArrayOfSearch;
import io.swagger.client.model.Error400;
import io.swagger.client.model.Error401;
import io.swagger.client.model.Error403;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.Ip;
import org.threeten.bp.LocalDate;
import io.swagger.client.model.Location;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApIsApi {
    private ApiClient apiClient;

    public ApIsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApIsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for astronomy
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call astronomyCall(String q, LocalDate dt, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/astronomy.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (dt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dt", dt));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call astronomyValidateBeforeCall(String q, LocalDate dt, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling astronomy(Async)");
        }
        // verify the required parameter 'dt' is set
        if (dt == null) {
            throw new ApiException("Missing the required parameter 'dt' when calling astronomy(Async)");
        }
        
        com.squareup.okhttp.Call call = astronomyCall(q, dt, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Astronomy API
     * Return Location and Astronomy Object
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format (required)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 astronomy(String q, LocalDate dt) throws ApiException {
        ApiResponse<InlineResponse2003> resp = astronomyWithHttpInfo(q, dt);
        return resp.getData();
    }

    /**
     * Astronomy API
     * Return Location and Astronomy Object
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format (required)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> astronomyWithHttpInfo(String q, LocalDate dt) throws ApiException {
        com.squareup.okhttp.Call call = astronomyValidateBeforeCall(q, dt, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Astronomy API (asynchronously)
     * Return Location and Astronomy Object
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call astronomyAsync(String q, LocalDate dt, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = astronomyValidateBeforeCall(q, dt, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for forecastWeather
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param days Number of days of weather forecast. Value ranges from 1 to 14 (required)
     * @param dt Date should be between today and next 14 day in yyyy-MM-dd format. e.g. &#x27;2015-01-01&#x27;  (optional)
     * @param unixdt Please either pass &#x27;dt&#x27; or &#x27;unixdt&#x27; and not both in same request. unixdt should be between today and next 14 day in Unix format. e.g. 1490227200  (optional)
     * @param hour Must be in 24 hour. For example 5 pm should be hour&#x3D;17, 6 am as hour&#x3D;6  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call forecastWeatherCall(String q, Integer days, LocalDate dt, Integer unixdt, Integer hour, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/forecast.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (days != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("days", days));
        if (dt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dt", dt));
        if (unixdt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unixdt", unixdt));
        if (hour != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hour", hour));
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call forecastWeatherValidateBeforeCall(String q, Integer days, LocalDate dt, Integer unixdt, Integer hour, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling forecastWeather(Async)");
        }
        // verify the required parameter 'days' is set
        if (days == null) {
            throw new ApiException("Missing the required parameter 'days' when calling forecastWeather(Async)");
        }
        
        com.squareup.okhttp.Call call = forecastWeatherCall(q, days, dt, unixdt, hour, lang, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Forecast API
     * Forecast weather API method returns upto next 10 day weather forecast and weather alert as json. The data is returned as a Forecast Object.   Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param days Number of days of weather forecast. Value ranges from 1 to 14 (required)
     * @param dt Date should be between today and next 14 day in yyyy-MM-dd format. e.g. &#x27;2015-01-01&#x27;  (optional)
     * @param unixdt Please either pass &#x27;dt&#x27; or &#x27;unixdt&#x27; and not both in same request. unixdt should be between today and next 14 day in Unix format. e.g. 1490227200  (optional)
     * @param hour Must be in 24 hour. For example 5 pm should be hour&#x3D;17, 6 am as hour&#x3D;6  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 forecastWeather(String q, Integer days, LocalDate dt, Integer unixdt, Integer hour, String lang) throws ApiException {
        ApiResponse<InlineResponse2001> resp = forecastWeatherWithHttpInfo(q, days, dt, unixdt, hour, lang);
        return resp.getData();
    }

    /**
     * Forecast API
     * Forecast weather API method returns upto next 10 day weather forecast and weather alert as json. The data is returned as a Forecast Object.   Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param days Number of days of weather forecast. Value ranges from 1 to 14 (required)
     * @param dt Date should be between today and next 14 day in yyyy-MM-dd format. e.g. &#x27;2015-01-01&#x27;  (optional)
     * @param unixdt Please either pass &#x27;dt&#x27; or &#x27;unixdt&#x27; and not both in same request. unixdt should be between today and next 14 day in Unix format. e.g. 1490227200  (optional)
     * @param hour Must be in 24 hour. For example 5 pm should be hour&#x3D;17, 6 am as hour&#x3D;6  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> forecastWeatherWithHttpInfo(String q, Integer days, LocalDate dt, Integer unixdt, Integer hour, String lang) throws ApiException {
        com.squareup.okhttp.Call call = forecastWeatherValidateBeforeCall(q, days, dt, unixdt, hour, lang, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Forecast API (asynchronously)
     * Forecast weather API method returns upto next 10 day weather forecast and weather alert as json. The data is returned as a Forecast Object.   Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param days Number of days of weather forecast. Value ranges from 1 to 14 (required)
     * @param dt Date should be between today and next 14 day in yyyy-MM-dd format. e.g. &#x27;2015-01-01&#x27;  (optional)
     * @param unixdt Please either pass &#x27;dt&#x27; or &#x27;unixdt&#x27; and not both in same request. unixdt should be between today and next 14 day in Unix format. e.g. 1490227200  (optional)
     * @param hour Must be in 24 hour. For example 5 pm should be hour&#x3D;17, 6 am as hour&#x3D;6  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call forecastWeatherAsync(String q, Integer days, LocalDate dt, Integer unixdt, Integer hour, String lang, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = forecastWeatherValidateBeforeCall(q, days, dt, unixdt, hour, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futureWeather
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date should be between 14 days and 300 days from today in the future in yyyy-MM-dd format (i.e. dt&#x3D;2023-01-01)  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futureWeatherCall(String q, LocalDate dt, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/future.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (dt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dt", dt));
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futureWeatherValidateBeforeCall(String q, LocalDate dt, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling futureWeather(Async)");
        }
        
        com.squareup.okhttp.Call call = futureWeatherCall(q, dt, lang, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Future API
     * Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 300 days from today in the future. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date should be between 14 days and 300 days from today in the future in yyyy-MM-dd format (i.e. dt&#x3D;2023-01-01)  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 futureWeather(String q, LocalDate dt, String lang) throws ApiException {
        ApiResponse<InlineResponse2002> resp = futureWeatherWithHttpInfo(q, dt, lang);
        return resp.getData();
    }

    /**
     * Future API
     * Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 300 days from today in the future. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date should be between 14 days and 300 days from today in the future in yyyy-MM-dd format (i.e. dt&#x3D;2023-01-01)  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> futureWeatherWithHttpInfo(String q, LocalDate dt, String lang) throws ApiException {
        com.squareup.okhttp.Call call = futureWeatherValidateBeforeCall(q, dt, lang, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Future API (asynchronously)
     * Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 300 days from today in the future. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date should be between 14 days and 300 days from today in the future in yyyy-MM-dd format (i.e. dt&#x3D;2023-01-01)  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futureWeatherAsync(String q, LocalDate dt, String lang, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futureWeatherValidateBeforeCall(q, dt, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for historyWeather
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format (required)
     * @param unixdt Please either pass &#x27;dt&#x27; or &#x27;unixdt&#x27; and not both in same request.&lt;br /&gt;unixdt should be on or after 1st Jan, 2015 in Unix format  (optional)
     * @param endDt Date on or after 1st Jan, 2015 in yyyy-MM-dd format&lt;br /&gt;&#x27;end_dt&#x27; should be greater than &#x27;dt&#x27; parameter and difference should not be more than 30 days between the two dates.  (optional)
     * @param unixendDt Date on or after 1st Jan, 2015 in Unix Timestamp format&lt;br /&gt;unixend_dt has same restriction as &#x27;end_dt&#x27; parameter. Please either pass &#x27;end_dt&#x27; or &#x27;unixend_dt&#x27; and not both in same request. e.g. unixend_dt&#x3D;1490227200  (optional)
     * @param hour Must be in 24 hour. For example 5 pm should be hour&#x3D;17, 6 am as hour&#x3D;6  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call historyWeatherCall(String q, LocalDate dt, Integer unixdt, LocalDate endDt, Integer unixendDt, Integer hour, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/history.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (dt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dt", dt));
        if (unixdt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unixdt", unixdt));
        if (endDt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_dt", endDt));
        if (unixendDt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unixend_dt", unixendDt));
        if (hour != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hour", hour));
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call historyWeatherValidateBeforeCall(String q, LocalDate dt, Integer unixdt, LocalDate endDt, Integer unixendDt, Integer hour, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling historyWeather(Async)");
        }
        // verify the required parameter 'dt' is set
        if (dt == null) {
            throw new ApiException("Missing the required parameter 'dt' when calling historyWeather(Async)");
        }
        
        com.squareup.okhttp.Call call = historyWeatherCall(q, dt, unixdt, endDt, unixendDt, hour, lang, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * History API
     * History weather API method returns historical weather for a date on or after 1st Jan, 2010 as json. The data is returned as a Forecast Object. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format (required)
     * @param unixdt Please either pass &#x27;dt&#x27; or &#x27;unixdt&#x27; and not both in same request.&lt;br /&gt;unixdt should be on or after 1st Jan, 2015 in Unix format  (optional)
     * @param endDt Date on or after 1st Jan, 2015 in yyyy-MM-dd format&lt;br /&gt;&#x27;end_dt&#x27; should be greater than &#x27;dt&#x27; parameter and difference should not be more than 30 days between the two dates.  (optional)
     * @param unixendDt Date on or after 1st Jan, 2015 in Unix Timestamp format&lt;br /&gt;unixend_dt has same restriction as &#x27;end_dt&#x27; parameter. Please either pass &#x27;end_dt&#x27; or &#x27;unixend_dt&#x27; and not both in same request. e.g. unixend_dt&#x3D;1490227200  (optional)
     * @param hour Must be in 24 hour. For example 5 pm should be hour&#x3D;17, 6 am as hour&#x3D;6  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 historyWeather(String q, LocalDate dt, Integer unixdt, LocalDate endDt, Integer unixendDt, Integer hour, String lang) throws ApiException {
        ApiResponse<InlineResponse2002> resp = historyWeatherWithHttpInfo(q, dt, unixdt, endDt, unixendDt, hour, lang);
        return resp.getData();
    }

    /**
     * History API
     * History weather API method returns historical weather for a date on or after 1st Jan, 2010 as json. The data is returned as a Forecast Object. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format (required)
     * @param unixdt Please either pass &#x27;dt&#x27; or &#x27;unixdt&#x27; and not both in same request.&lt;br /&gt;unixdt should be on or after 1st Jan, 2015 in Unix format  (optional)
     * @param endDt Date on or after 1st Jan, 2015 in yyyy-MM-dd format&lt;br /&gt;&#x27;end_dt&#x27; should be greater than &#x27;dt&#x27; parameter and difference should not be more than 30 days between the two dates.  (optional)
     * @param unixendDt Date on or after 1st Jan, 2015 in Unix Timestamp format&lt;br /&gt;unixend_dt has same restriction as &#x27;end_dt&#x27; parameter. Please either pass &#x27;end_dt&#x27; or &#x27;unixend_dt&#x27; and not both in same request. e.g. unixend_dt&#x3D;1490227200  (optional)
     * @param hour Must be in 24 hour. For example 5 pm should be hour&#x3D;17, 6 am as hour&#x3D;6  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> historyWeatherWithHttpInfo(String q, LocalDate dt, Integer unixdt, LocalDate endDt, Integer unixendDt, Integer hour, String lang) throws ApiException {
        com.squareup.okhttp.Call call = historyWeatherValidateBeforeCall(q, dt, unixdt, endDt, unixendDt, hour, lang, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * History API (asynchronously)
     * History weather API method returns historical weather for a date on or after 1st Jan, 2010 as json. The data is returned as a Forecast Object. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format (required)
     * @param unixdt Please either pass &#x27;dt&#x27; or &#x27;unixdt&#x27; and not both in same request.&lt;br /&gt;unixdt should be on or after 1st Jan, 2015 in Unix format  (optional)
     * @param endDt Date on or after 1st Jan, 2015 in yyyy-MM-dd format&lt;br /&gt;&#x27;end_dt&#x27; should be greater than &#x27;dt&#x27; parameter and difference should not be more than 30 days between the two dates.  (optional)
     * @param unixendDt Date on or after 1st Jan, 2015 in Unix Timestamp format&lt;br /&gt;unixend_dt has same restriction as &#x27;end_dt&#x27; parameter. Please either pass &#x27;end_dt&#x27; or &#x27;unixend_dt&#x27; and not both in same request. e.g. unixend_dt&#x3D;1490227200  (optional)
     * @param hour Must be in 24 hour. For example 5 pm should be hour&#x3D;17, 6 am as hour&#x3D;6  (optional)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call historyWeatherAsync(String q, LocalDate dt, Integer unixdt, LocalDate endDt, Integer unixendDt, Integer hour, String lang, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = historyWeatherValidateBeforeCall(q, dt, unixdt, endDt, unixendDt, hour, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipLookup
     * @param q Pass IP address. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipLookupCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ip.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipLookupValidateBeforeCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling ipLookup(Async)");
        }
        
        com.squareup.okhttp.Call call = ipLookupCall(q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * IP Lookup API
     * IP Lookup API method allows a user to get up to date information for an IP address. 
     * @param q Pass IP address. (required)
     * @return Ip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ip ipLookup(String q) throws ApiException {
        ApiResponse<Ip> resp = ipLookupWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * IP Lookup API
     * IP Lookup API method allows a user to get up to date information for an IP address. 
     * @param q Pass IP address. (required)
     * @return ApiResponse&lt;Ip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ip> ipLookupWithHttpInfo(String q) throws ApiException {
        com.squareup.okhttp.Call call = ipLookupValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<Ip>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * IP Lookup API (asynchronously)
     * IP Lookup API method allows a user to get up to date information for an IP address. 
     * @param q Pass IP address. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipLookupAsync(String q, final ApiCallback<Ip> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipLookupValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ip>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for realtimeWeather
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call realtimeWeatherCall(String q, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/current.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call realtimeWeatherValidateBeforeCall(String q, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling realtimeWeather(Async)");
        }
        
        com.squareup.okhttp.Call call = realtimeWeatherCall(q, lang, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Realtime API
     * Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.&lt;br /&gt;&lt;br /&gt;Current object contains current or realtime weather information for a given city. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 realtimeWeather(String q, String lang) throws ApiException {
        ApiResponse<InlineResponse200> resp = realtimeWeatherWithHttpInfo(q, lang);
        return resp.getData();
    }

    /**
     * Realtime API
     * Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.&lt;br /&gt;&lt;br /&gt;Current object contains current or realtime weather information for a given city. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> realtimeWeatherWithHttpInfo(String q, String lang) throws ApiException {
        com.squareup.okhttp.Call call = realtimeWeatherValidateBeforeCall(q, lang, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Realtime API (asynchronously)
     * Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.&lt;br /&gt;&lt;br /&gt;Current object contains current or realtime weather information for a given city. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param lang Returns &#x27;condition:text&#x27; field in API in the desired language.&lt;br /&gt; Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check &#x27;lang-code&#x27;.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call realtimeWeatherAsync(String q, String lang, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = realtimeWeatherValidateBeforeCall(q, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchAutocompleteWeather
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchAutocompleteWeatherCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/search.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchAutocompleteWeatherValidateBeforeCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchAutocompleteWeather(Async)");
        }
        
        com.squareup.okhttp.Call call = searchAutocompleteWeatherCall(q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search/Autocomplete API
     * WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @return ArrayOfSearch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfSearch searchAutocompleteWeather(String q) throws ApiException {
        ApiResponse<ArrayOfSearch> resp = searchAutocompleteWeatherWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * Search/Autocomplete API
     * WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @return ApiResponse&lt;ArrayOfSearch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfSearch> searchAutocompleteWeatherWithHttpInfo(String q) throws ApiException {
        com.squareup.okhttp.Call call = searchAutocompleteWeatherValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfSearch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search/Autocomplete API (asynchronously)
     * WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object. 
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAutocompleteWeatherAsync(String q, final ApiCallback<ArrayOfSearch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchAutocompleteWeatherValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfSearch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeZone
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call timeZoneCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/timezone.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeZoneValidateBeforeCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling timeZone(Async)");
        }
        
        com.squareup.okhttp.Call call = timeZoneCall(q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Time Zone API
     * Return Location Object
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location timeZone(String q) throws ApiException {
        ApiResponse<Location> resp = timeZoneWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * Time Zone API
     * Return Location Object
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> timeZoneWithHttpInfo(String q) throws ApiException {
        com.squareup.okhttp.Call call = timeZoneValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Time Zone API (asynchronously)
     * Return Location Object
     * @param q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call timeZoneAsync(String q, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeZoneValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
