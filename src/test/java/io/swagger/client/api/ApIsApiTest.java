/*
 * Weather API
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.      We provide following data through our API:      - Real-time weather  - 14 day weather forecast  - Astronomy  - Time zone  - Location data  - Search or Autocomplete API  - NEW: Historical weather  - NEW: Future Weather (Upto 300 days ahead)  - Weather Alerts  - Air Quality Data    # Getting Started     You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!      We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).      # Authentication     API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .        ##  key parameter   key=YOUR_API_KEY 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ArrayOfSearch;
import io.swagger.client.model.Error400;
import io.swagger.client.model.Error401;
import io.swagger.client.model.Error403;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.Ip;
import org.threeten.bp.LocalDate;
import io.swagger.client.model.Location;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ApIsApi
 */
@Ignore
public class ApIsApiTest {

    private final ApIsApi api = new ApIsApi();

    /**
     * Astronomy API
     *
     * Return Location and Astronomy Object
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void astronomyTest() throws Exception {
        String q = null;
        LocalDate dt = null;
        InlineResponse2003 response = api.astronomy(q, dt);

        // TODO: test validations
    }
    /**
     * Forecast API
     *
     * Forecast weather API method returns upto next 10 day weather forecast and weather alert as json. The data is returned as a Forecast Object.   Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void forecastWeatherTest() throws Exception {
        String q = null;
        Integer days = null;
        LocalDate dt = null;
        Integer unixdt = null;
        Integer hour = null;
        String lang = null;
        InlineResponse2001 response = api.forecastWeather(q, days, dt, unixdt, hour, lang);

        // TODO: test validations
    }
    /**
     * Future API
     *
     * Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 300 days from today in the future. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void futureWeatherTest() throws Exception {
        String q = null;
        LocalDate dt = null;
        String lang = null;
        InlineResponse2002 response = api.futureWeather(q, dt, lang);

        // TODO: test validations
    }
    /**
     * History API
     *
     * History weather API method returns historical weather for a date on or after 1st Jan, 2010 as json. The data is returned as a Forecast Object. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void historyWeatherTest() throws Exception {
        String q = null;
        LocalDate dt = null;
        Integer unixdt = null;
        LocalDate endDt = null;
        Integer unixendDt = null;
        Integer hour = null;
        String lang = null;
        InlineResponse2002 response = api.historyWeather(q, dt, unixdt, endDt, unixendDt, hour, lang);

        // TODO: test validations
    }
    /**
     * IP Lookup API
     *
     * IP Lookup API method allows a user to get up to date information for an IP address. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ipLookupTest() throws Exception {
        String q = null;
        Ip response = api.ipLookup(q);

        // TODO: test validations
    }
    /**
     * Realtime API
     *
     * Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.&lt;br /&gt;&lt;br /&gt;Current object contains current or realtime weather information for a given city. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void realtimeWeatherTest() throws Exception {
        String q = null;
        String lang = null;
        InlineResponse200 response = api.realtimeWeather(q, lang);

        // TODO: test validations
    }
    /**
     * Search/Autocomplete API
     *
     * WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchAutocompleteWeatherTest() throws Exception {
        String q = null;
        ArrayOfSearch response = api.searchAutocompleteWeather(q);

        // TODO: test validations
    }
    /**
     * Time Zone API
     *
     * Return Location Object
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void timeZoneTest() throws Exception {
        String q = null;
        Location response = api.timeZone(q);

        // TODO: test validations
    }
}
